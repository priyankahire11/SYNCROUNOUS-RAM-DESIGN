 module ram #(
    parameter DATA_WIDTH = 8,     // Data width (bits)
    parameter ADDR_WIDTH = 4      // Address width
)(
    input                   clk,     // Clock input
    input                   rst,     // Reset input (active high)
    input                   we,      // Write enable
    input [ADDR_WIDTH-1:0]  addr,    // Address input
    input [DATA_WIDTH-1:0]  din,     // Data input (for write operation)
    output reg [DATA_WIDTH-1:0] dout // Data output (for read operation)
);

    // Declare the RAM as a 2D array
    reg [DATA_WIDTH-1:0] ram [(2**ADDR_WIDTH)-1:0];

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            dout <= 0; // Reset the output to 0
        end else begin
            if (we) begin
                ram[addr] <= din; // Write data to RAM on the specified address
            end
            dout <= ram[addr]; // Read data from RAM at the specified address
        end
    end

endmodule
 module tb_ram;

    // Testbench parameters
    parameter DATA_WIDTH = 8;
    parameter ADDR_WIDTH = 4;

    // Inputs to the DUT (Design Under Test)
    reg clk;
    reg rst;
    reg we;
    reg [ADDR_WIDTH-1:0] addr;
    reg [DATA_WIDTH-1:0] din;

    // Outputs from the DUT
    wire [DATA_WIDTH-1:0] dout;

    // Instantiate the RAM module
    ram #(
        .DATA_WIDTH(DATA_WIDTH),
        .ADDR_WIDTH(ADDR_WIDTH)
    ) uut (
        .clk(clk),
        .rst(rst),
        .we(we),
        .addr(addr),
        .din(din),
        .dout(dout)
    );

    // Clock generation
    always begin
        #5 clk = ~clk; // Clock period of 10 time units
    end

    // Initial block to apply test vectors
    initial begin
        // Initialize signals
        clk = 0;
        rst = 0;
        we = 0;
        addr = 0;
        din = 0;

        // Reset the RAM
        rst = 1;
        #10 rst = 0;

        // Write data to address 3
        we = 1;
        addr = 4'b0011;
        din = 8'b10101010;
        #10 we = 0; // Disable write

        // Read the data from address 3
        addr = 4'b0011;
        #10; // Wait for read data

        // Write data to address 5
        we = 1;
        addr = 4'b0101;
        din = 8'b11001100;
        #10 we = 0; // Disable write

        // Read the data from address 5
        addr = 4'b0101;
        #10; // Wait for read data

        // Read the data from address 3 (should be 8'b10101010)
        addr = 4'b0011;
        #10;

        // Complete simulation
        $finish;
    end

    // Monitor the output
    initial begin
        $monitor("Time = %0t | Addr = %b | Data In = %b | Data Out = %b", $time, addr, din, dout);
    end

endmodule